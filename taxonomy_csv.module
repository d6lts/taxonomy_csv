<?php
// $Id$
// Copyright (c) 2007 Dennis Stevense, see LICENSE.txt for more information.

define('TAXONOMY_CSV_NORMAL', 0);
define('TAXONOMY_CSV_EXCEL_WIN', 1);
define('TAXONOMY_CSV_EXCEL_MAC', 2);

/**
 * Implementation of hook_help().
 */
function taxonomy_csv_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows you to import taxonomy from a CSV file.');
    
    case 'admin/content/taxonomy/csv':
      return t('<p>Here you can upload a <a href="http://en.wikipedia.org/wiki/Comma-separated_values" title="Wikipedia definition">CSV</a> file in order to import taxonomy terms into a vocabulary. If the destination vocabulary is hierarchy-enabled, additional columns in the CSV file are interpreted as child terms of the term indicated by the column before it.');
  }
}

/**
 * Implementation of hook_menu().
 */
function taxonomy_csv_menu($may_cache) {
  $items = array();
  
  if ($may_cache) {
    $items[] = array('path' => 'admin/taxonomy/csv',
      'title' => t('CSV import'),
      'callback' => 'taxonomy_csv_import',
      'weight' => 12,
      'type' => MENU_LOCAL_TASK);
  }
  
  return $items;
}

/**
 * Generates the CSV import form.
 */
function taxonomy_csv_import() {
  $form = array('#attributes' => array('enctype' => 'multipart/form-data'));
  
  $form['upload'] = array(
    '#type' => 'file',
    '#title' => t('CSV file'),
  );
  
  $form['format'] = array(
    '#type' => 'select',
    '#title' => t('CSV format'),
    '#options' => array(
      TAXONOMY_CSV_NORMAL => t('Normal'),
      TAXONOMY_CSV_EXCEL_WIN => t('Microsoft Excel (Windows)'),
      TAXONOMY_CSV_EXCEL_MAC => t('Microsoft Excel (Mac)')
    ),
  );
  
  $form['vid'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => array(),
    '#required' => TRUE,
    '#description' => t('The vocabulary you want to import the file into. You might want to !add-new-vocab for your imported terms.', array('!add-new-vocab' => l(t('add a new vocabulary'), 'admin/taxonomy/add/vocabulary', array(), drupal_get_destination()))),
  );
  
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vid => $vocabulary) {
    $form['vid']['#options'][$vid] = $vocabulary->name;
  }
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  
  return drupal_get_form('taxonomy_csv_import', $form);
}

/**
 * Handles CSV import form validation.
 */
function taxonomy_csv_import_validate($form_id, $form_values) {
  if (!file_check_upload()) {
    form_set_error('upload', t('Please upload a file.'));
  }
}

/**
 * Handles CSV import form submission.
 */
function taxonomy_csv_import_submit($form_id, $form_values) {
  $vid = $form_values['vid'];
  $vocabulary = taxonomy_get_vocabulary($vid);
  
  switch ($form_values['format']) {
    case TAXONOMY_CSV_EXCEL_MAC:
      ini_set('auto_detect_line_endings', '1');
      
    case TAXONOMY_CSV_EXCEL_WIN:
      $delimiter = ';';
      break;
      
    default:
      $delimiter = ',';
  }
  
  $buffer = '';
  $file = file_check_upload();
  $handle = fopen($file->filepath, 'r');
  while ($line = fgetcsv($handle, 1024, $delimiter)) {
    $parent = $vocabulary->hierarchy ? 0 : NULL;
    for ($c = 0; $c < count($line); $c++) {
      if (!$line[$c] || ($c > 0 && !$vocabulary->hierarchy)) {
        break;
      }

      $term = taxonomy_csv_get_term($line[$c], $vid, $parent);
      $parent = $term->tid;
    }
  }
  fclose($handle);
  
  drupal_set_message(t('The CSV file has been imported.'));
}

/**
 * Get or create a term with the given name in the given vocabulary and given parent.
 */
function taxonomy_csv_get_term($name, $vid, $parent = NULL) {
  static $terms_by_name;
  
  $name = trim($name);
  $key = drupal_strtolower($name);
  if (!is_null($parent)) {
    $key .= '_'. $parent;
  }
  
  if (isset($terms_by_name[$key])) {
    return $terms_by_name[$key];
  }
  else if ($term = taxonomy_csv_find_term($name, $vid, $parent)) {
    $terms_by_name[$key] = $term;
  }
  else {
    $term = array('name' => $name, 'vid' => $vid, 'parent' => $parent);
    taxonomy_save_term($term);
    
    $terms_by_name[$key] = (object)$term;
  }
  
  return $terms_by_name[$key];
}

/**
 * Find an existing term by name in the given vocabulary and given parent.
 */
function taxonomy_csv_find_term($name, $vid, $parent = NULL) {
  if (!is_null($parent)) {
    $result = db_query("SELECT t.tid, t.* FROM {term_data} t INNER JOIN {term_hierarchy} h WHERE '%s' LIKE LOWER(t.name) AND h.parent = %d LIMIT 1", drupal_strtolower($name), $parent);
  }
  else {
    $result = db_query("SELECT t.tid, t.* FROM {term_data} t WHERE '%s' LIKE LOWER(t.name) LIMIT 1", drupal_strtolower($name));
  }
  
  return db_fetch_object($result);
}
